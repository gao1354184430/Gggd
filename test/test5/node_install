#!/bin/bash
#远端文件储存地址
Github="https://ghproxy.net/https://raw.githubusercontent.com/gao1354184430/Gggd/master/test/test6"
GostService="https://ghproxy.net/https://raw.githubusercontent.com/KANIKIG/Multi-EasyGost/master"
cndownload="https://ghproxy.net/https://raw.githubusercontent.com/gao1354184430/Gggd/master/test/test5"
#gost指定版本
ct_new_ver="2.11.1"
#测试与GitHub连通性
rm -rf /root/.test.txt
curl -s $Github/test > /root/.test.txt
github_test=`sed -n '1p' /root/.test.txt`
rm -rf /root/.test.txt /root/.crontab.txt
#颜色文字
Green_font_prefix="\033[32m" && Red_font_prefix="\033[31m" && Green_background_prefix="\033[42;37m" && Red_background_prefix="\033[41;37m" && Font_color_suffix="\033[0m"
Info="${Green_font_prefix}[信息]${Font_color_suffix}"
Error="${Red_font_prefix}[错误]${Font_color_suffix}"
Tip="${Green_font_prefix}[注意]${Font_color_suffix}"
#开放防火墙
function install_iptables(){
systemctl stop firewalld
systemctl mask firewalld
yum install -y iptables
yum install iptables-services -y
iptables -F
iptables -P INPUT ACCEPT
iptables -X
service iptables save
}
function install_vnets(){
	yum -y install zip unzip vim
    mkdir /usr/local/vnet
    cd /usr/local/vnet
    wget -N --no-check-certificate "https://www.isyunyi.com/download/linux/tunnel.zip"
    unzip tunnel.zip 
    rm -f /usr/local/vnet/tunnel.zip
    rm -f /usr/local/vnet/client
    echo '#!/bin/bash
sleep 0.5
cd /usr/local/vnet
./server' >/usr/local/vnet/server.sh  
	rm -rf /usr/local/vnet/server.conf
	wget -N --no-check-certificate $Github/node/$diQu/server.conf -O /usr/local/vnet/server.conf
    chmod +x /usr/local/vnet/server /usr/local/vnet/server.sh /usr/local/vnet/server.conf
	echo '
[Unit]
Description=VnetServer.Service
After=rc-local.service syslog.target network.target remote-fs.target nss-lookup.target
[Service]
Type=simple
ExecStart=/usr/local/vnet/server.sh
ExecStartPost=/usr/local/vnet/server.conf
Restart=always
LimitNOFILE=512000
LimitNPROC=512000
[Install]
WantedBy=multi-user.target' >/usr/lib/systemd/system/vnets.service
	cd /root
	systemctl start vnets
	systemctl status vnets
	systemctl enable vnets
	echo -e "\033[42;37mvnet服务端安装完成\033[0m" 
}
function install_vnetc(){
	yum -y install zip unzip
    mkdir /usr/local/vnet
    cd /usr/local/vnet
    wget -N --no-check-certificate "https://www.isyunyi.com/download/linux/tunnel.zip"
    unzip tunnel.zip 
    rm -f /usr/local/vnet/tunnel.zip
    rm -f /usr/local/vnet/server
    echo '#!/bin/bash
sleep 0.5
cd /usr/local/vnet
./client' >/usr/local/vnet/client.sh 
	rm -rf /usr/local/vnet/client.conf
	echo '#!/bin/bash
sleep 1.5
#在下方编写规则
' >/usr/local/vnet/client.conf
    chmod +x /usr/local/vnet/client /usr/local/vnet/client.sh /usr/local/vnet/client.conf
	echo '
[Unit]
Description=VnetClient.Service
After=rc-local.service
[Service]
Type=simple
ExecStart=/usr/local/vnet/client.sh
ExecStartPost=/usr/local/vnet/client.conf
Restart=always
LimitNOFILE=512000
LimitNPROC=512000
[Install]
WantedBy=multi-user.target' >/usr/lib/systemd/system/vnetc.service
	cd /root
	systemctl start vnetc
	systemctl enable vnetc
	systemctl status vnetc
	echo -e "\033[42;37mvnet服务端安装完成\033[0m" 
}
function install_docker(){
wget -qO- get.docker.com | bash
systemctl start docker
systemctl enable docker
systemctl status docker
sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
rm -rf /root/docker.run
wget --no-check-certificate $Github/node/$diQu/docker -O /root/docker.run
chmod +x /root/docker.run
/root/docker.run
}
function install_gost() {
	bit="amd64"
	yum install -y gzip
    rm -rf /root/gost-linux-"$bit"-"$ct_new_ver".gz
    wget --no-check-certificate https://ghproxy.net/https://github.com/ginuerzh/gost/releases/download/v$ct_new_ver/gost-linux-$bit-$ct_new_ver.gz -O /root/gost-linux-$bit-$ct_new_ver.gz
    gunzip /root/gost-linux-"$bit"-"$ct_new_ver".gz
    mv /root/gost-linux-"$bit"-"$ct_new_ver" /usr/bin/gost
    chmod -R 777 /usr/bin/gost
    wget --no-check-certificate $GostService/gost.service && chmod -R 777 gost.service && mv gost.service /usr/lib/systemd/system
	rm -rf /etc/gost/config.json
    mkdir /etc/gost && wget --no-check-certificate $Github/node/$diQu/config.json && mv config.json /etc/gost && chmod -R 777 /etc/gost
	systemctl enable gost && systemctl restart gost
	echo "------------------------------"
if test -a /usr/bin/gost -a /usr/lib/systemctl/gost.service -a /etc/gost/config.json; then
    echo "gost安装成功"
    rm -rf "$(pwd)"/gost
    rm -rf "$(pwd)"/gost.service
    rm -rf "$(pwd)"/config.json
else
    echo "gost没有安装成功，可以在Github[EasyGost]中提交issue"
    rm -rf "$(pwd)"/gost
    rm -rf "$(pwd)"/gost.service
    rm -rf "$(pwd)"/config.json
    rm -rf "$(pwd)"/gost.sh
fi
}
#nginx废弃，使用tengine
function install_nginx() {
	yum -y update
	rpm -ivh http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.18.0-2.el7.ngx.x86_64.rpm
	mkdir -p /usr/local/nginx/
	wget $Github/mjnginx.conf -O $nginx_Conf
	#写入配置文件
	cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup
echo "worker_processes  1;
user nobody;
events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    server {
        listen       2333;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
	include /usr/local/nginx/*.conf;
}">/etc/nginx/nginx.conf
	systemctl resatrt nginx
	systemctl enable nginx
	systemctl status nginx
}
function install_tengine() {
        yum update -y
        yum install epel-release -y
        yum install gcc gcc-c++ autoconf automake -y
        yum install pcre-devel -y
        yum install openssl-devel -y
        yum install libmcrypt libmcrypt-devel mcrypt mhash -y
		yum install kernel-headers kernel-devel make -y
		rm -rf /usr/local/nginx
		cd /root
		wget http://tengine.taobao.org/download/tengine-2.3.3.tar.gz
		tar zxvf tengine-2.3.3.tar.gz
		cd /root/tengine*
		./configure --without-http_upstream_keepalive_module --with-stream --with-stream_ssl_module --with-stream_sni --add-module=modules/ngx_http_upstream_* --add-module=modules/ngx_debug_* --add-module=modules/ngx_http_slice_module --add-module=modules/ngx_http_user_agent_module --add-module=modules/ngx_http_reqstat_module --add-module=modules/ngx_http_proxy_connect_module --add-module=modules/ngx_http_footer_filter_module
        make
        make install
        wget -N -P /usr/local/nginx/ $cndownload/download/ws
		wget -N -P /usr/local/nginx/conf/ $cndownload/download/nginx.conf
		echo "[Unit]
Description=The nginx HTTP and reverse proxy server
After=syslog.target network.target remote-fs.target nss-lookup.target
 
[Service]
Type=forking
PIDFile=/usr/local/nginx/logs/nginx.pid
ExecStartPre=/usr/local/nginx/sbin/nginx -t
ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true
 
[Install]
WantedBy=multi-user.target" >/lib/systemd/system/nginx.service
        systemctl daemon-reload
        systemctl start nginx
        systemctl enable nginx
        echo -e "${Green}done!${Font}"
}
function install_brook() {
		wget -N -P /root $cndownload//brook-pf-mod.sh
		chmod +x /root/brook-pf-mod.sh
		/root/brook-pf-mod.sh install
		#添加DDNS监控
		yum install bind-utils -y
    cron_config=$(crontab -l | grep "brook-pf-mod.sh monitor")
    if [[ -z ${cron_config} ]]; then
		crontab -l > "/root/crontab.bak"
		sed -i "/brook-pf-mod.sh monitor/d" "/root/crontab.bak"
		echo -e "\n*/2 * * * *  /bin/bash /root/brook-pf-mod.sh monitor" >> "/root/crontab.bak"
		crontab "/root/crontab.bak"
		rm -r "/root/crontab.bak"
        echo -e "${Info} Brook 服务端运行状态监控功能 启动成功 !"
    else
		echo -e "${Error} Brook 服务端运行状态监控功能 启动失败 !" 
    fi
}
#安装cnsync
function install_cnsync() {
	wget $cndownload/cnsync -O /usr/bin/cnsync
	chmod +x /usr/bin/cnsync
	cnsync addcron
}
#安装hksync
function install_hksync() {
	wget $cndownload/hksync -O /usr/bin/hksync	
	chmod +x /usr/bin/hksync
	hksync addcron
}
#菜单选项
function menu_server() {
  echo && echo -e "  月抛/正常鸡 一键安装docker/vnet/gost
  支持一键安装并从远端下发配置-直接黑化
 ————————————
 ${Green_font_prefix} tw:${Font_color_suffix} 安装至台湾机器
 ${Green_font_prefix} tw2:${Font_color_suffix} 安装至台湾2号机
 ${Green_font_prefix} jp:${Font_color_suffix} 安装至日本机器
————————————
 ${Green_font_prefix} 3.${Font_color_suffix} 安装脚本" &&echo 
	echo -e "输入\033[32m tw\033[0m|\033[32m jp\033[0m来进行安装" 
  echo
  read -erp " 请输入国家地区代码:" diQu
	yum update -y
	install_iptables
	install_docker
	install_vnets
	install_gost
}
#cn菜单
function menu_server2() {
  echo && echo -e "  国内机器 一键安装Nginx/Brook等
  支持一键安装并从远端下发配置-直接黑化
  tengine为nginx1.7分支，该分支支持DDNS
 ————————————
 ${Green_font_prefix} 1:${Font_color_suffix} 安装Nginx负载(已废弃，使用tengine)
 ${Green_font_prefix} 2:${Font_color_suffix} 安装tengine负载支持DDNS/主动健康检查
 ${Green_font_prefix} 3:${Font_color_suffix} 安装gost隧道
 ${Green_font_prefix} 4:${Font_color_suffix} 安装vnet隧道
 ${Green_font_prefix} 5:${Font_color_suffix} 安装brook转发
 ${Green_font_prefix} 6:${Font_color_suffix} 安装cnsync同步
 ${Green_font_prefix} 7.${Font_color_suffix} 安装vnets+hksync(只需要vnet落地)
 ${Green_font_prefix} 8.${Font_color_suffix} 安装vnets+tengine+hksync(香港跳板安装)
————————————
 ${Green_font_prefix} 0.${Font_color_suffix} 安装国内四件套(中转一键部署)" &&echo 
  echo
  read -erp " 请输入对应的数字:" Num
  case "$Num" in
  1)
    install_nginx
    ;;
  2)
	yum update -y
    install_tengine
    ;;
  3)
    install_gost
    ;;
  4)
    install_vnetc
    ;;
  5)
    install_brook
    ;;
  6)
    install_cnsync
    ;;
  7)
    install_vnets
	install_hksync
	hksync all
    ;;
  8)
    install_vnets
	install_tengine
	install_hksync
	hksync all
    ;;
  0)
	yum update -y
	install_iptables
    install_cnsync
	install_brook
	install_tengine
	install_vnetc
	install_gost
	cnsync all
    ;;
  *)
    echo "请输入正确数字 [1-3]"
    ;;
  esac
}
action=$1
if [[ -n $action ]]; then
#增加一个通信检测，如果与GitHub通信失败则停止脚本
	if [[ $github_test == "success" ]]; then
		if [[ $action == "cn" ]]; then
			menu_server2			
		elif [[ $action == "cron" ]]; then
			echo -e "\033[32m 还没写 \033[0m"
		fi
	else
		echo -e "\033[31m 远端通信失败，程序中止 \033[0m"
	fi
else
	menu_server
fi
