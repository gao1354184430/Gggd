#!/bin/bash
#远端文件储存地址
Github="https://raw.githubusercontent.com/gao1354184430/Gggd/master/test/test6"
Github_shell="https://raw.githubusercontent.com/gao1354184430/Gggd/master/test/test5"
#brook/vnet/gost本地文件位置
brook_Conf="/usr/local/brook-pf/brook.conf"
vnet_Conf="/usr/local/vnet/server.conf"
gost_Conf="/etc/gost/config.json"
nginx_Conf="/usr/local/nginx/hknginx.conf"
nginx_Conf_ws="/usr/local/nginx/ws"
nginx_Conf_status="/usr/local/nginx/status"
#是否开启监控
rm -rf /root/.crontab.txt
curl -s $Github/crontab > /root/.crontab.txt
github_cron=`sed -n '1p' /root/.crontab.txt`
#测试与GitHub连通性
rm -rf /root/.test.txt
curl -s $Github/test > /root/.test.txt
github_test=`sed -n '1p' /root/.test.txt`
rm -rf /root/.test.txt /root/.crontab.txt
#版本号
#请务必确认版本号与version文件一致
#增加该版本号，即可触发自动更新（需机器开启crontab）
#1.0.3增加了nginx_ws/status每日检测更新
shell_version="1.0.4"
#从远端更新
function Restart_vnets(){
	rm -rf $vnet_Conf.back
	cp $vnet_Conf $vnet_Conf.back
	rm -rf $vnet_Conf
	wget $Github/server.conf -O $vnet_Conf
	chmod +x $vnet_Conf
	systemctl restart vnets
	systemctl status vnets
}
function Restart_nginx(){
	rm -rf $nginx_Conf.back
	cp $nginx_Conf $nginx_Conf.back
	rm -rf $nginx_Conf
	wget $Github/hknginx.conf -O $nginx_Conf
    systemctl restart nginx
	systemctl status nginx
	/etc/init.d/nginx restart
}
function crontab_add(){
    #创建监控文件
	mkdir /usr/local/cron
	echo "#!/bin/bash
#
hksync cron
#cnsync gkd">/usr/local/cron/hksync_cron
	#查看是否已经存在监控
	cron_config=$(crontab -l | grep "cnsync cron")
	cron_config2=$(crontab -l | grep "cnsync update")
	#检查并添加自动同步
    if [[ -z ${cron_config} ]]; then
		rm -r "/root/crontab.bak"
		crontab -l > "/root/crontab.bak"
		echo -e "\n*/2 * * * * bash /usr/local/cron/hksync_cron" >> "/root/crontab.bak"
		crontab "/root/crontab.bak"
		rm -r "/root/crontab.bak"
        echo -e "${Info} 已添加hksync自动同步!"        
    else
		echo -e "${Error} hksync自动同步已存在" 
    fi
	#检查并添加hksync每日检查更新
	if [[ -z ${cron_config2} ]]; then
		rm -r "/root/crontab.bak"
		crontab -l > "/root/crontab.bak"
		echo -e "\n0 4 * * *  hksync update" >> "/root/crontab.bak"
		crontab "/root/crontab.bak"
		rm -r "/root/crontab.bak"
        echo -e "${Info} 已添加hksync自动更新!"        
    else
		echo -e "${Error} hksync自动更新已存在" 
    fi
}
function crontab_all(){
if [[ $github_test == "success" ]] && [[ $github_cron == "true" ]]; then
	#vnet监控
	rm -rf $vnet_Conf.new
	wget $Github/server.conf -O $vnet_Conf.new
	vnet_md5=`md5sum $vnet_Conf  | cut -d ' ' -f1`
	vnet_md5_n=`md5sum $vnet_Conf.new  | cut -d ' ' -f1`
	#nginx监控
	rm -rf $nginx_Conf.new
	wget $Github/hknginx.conf -O $nginx_Conf.new
	nginx_md5=`md5sum $nginx_Conf  | cut -d ' ' -f1`
	nginx_md5_n=`md5sum $nginx_Conf.new  | cut -d ' ' -f1`	
	#检查与远端是否相符
	if [[ $vnet_md5 != $vnet_md5_n ]]; then
		echo "vnet与远端文件不符，正在同步"
		rm -rf $vnet_Conf
		mv $vnet_Conf.new $vnet_Conf
		chmod +x $vnet_Conf
		systemctl restart vnets
		echo -e "\033[32m vnet文件已更新，同步完成 \033[0m"
	elif [[ $nginx_md5 != $nginx_md5_n ]]; then
		echo "Nginx与远端文件不符，正在同步"
		rm -rf $nginx_Conf
		mv $nginx_Conf.new $nginx_Conf
		systemctl reload nginx
		echo -e "\033[32m Nginx文件已更新，同步完成 \033[0m"
	else
		echo "所有文件与远端相符，无需同步"
	fi
else
	echo "通信中断或已关闭同步，请手动操作"
fi
}
#增加nginx：ws/status更新
function hksync_update(){
new_version=`curl -s $Github_shell/version`
if [[ $github_test == "success" ]] && [[ $github_cron == "true" ]]; then	
    #检测nginx的ws/status更新
	wget $Github_shell/download/ws -O $nginx_Conf_ws.new
	nginx_ws_md5=`md5sum $nginx_Conf_ws  | cut -d ' ' -f1`
	nginx_ws_md5_n=`md5sum $nginx_Conf_ws.new  | cut -d ' ' -f1`
		if [[ $nginx_ws_md5 != $nginx_ws_md5_n ]]; then
		echo "nginx_ws与远端文件不符，正在更新"
		rm -rf $nginx_Conf_ws
		mv $nginx_Conf_ws.new $nginx_Conf_ws
		echo -e "\033[32m nginx_ws文件已更新 \033[0m"
		else
	    echo -e "nginx_ws文件无需更新"
		fi
		rm -rf $nginx_Conf_ws.new
	#检测hksync更新
	if [[ $new_version > $shell_version ]];then
	    echo -e "当前版本\033[32m $shell_version \033[0m,最新版本为\033[32m $new_version \033[0m"
	    rm -rf /usr/bin/hksync
    	wget $Github_shell/hksync -O /usr/bin/hksync
    	chmod +x /usr/bin/hksync
	    echo -e "更新完成,版本号\033[32m $new_version \033[0m"
	    else
	    echo -e "hksync当前版本号为\033[32m $shell_version \033[0m,已是最新版本"
    fi
else
echo -e "\033[31m 通信中断或已关闭同步，程序中止 \033[0m"
fi
}
action=$1
if [[ -n $action ]]; then
#增加一个通信检测，如果与GitHub通信失败则停止脚本
if [[ $github_test == "success" ]]; then
if [[ $action == "vnet" ]]; then
    Restart_vnets
	echo -e "\033[32m vnet文件已更新 \033[0m"
  elif [[ $action == "nginx" ]]; then
    Restart_nginx
    echo -e "\033[32m nginx文件已更新 \033[0m"
  elif [[ $action == "all" ]]; then
    Restart_vnets
	Restart_nginx
    echo -e "\033[32m brook/vnet/gost文件已更新 \033[0m"
  elif [[ $action == "cron" ]]; then
	crontab_all
  elif [[ $action == "v" ]]; then
	echo -e $shell_version
  elif [[ $action == "update" ]]; then
	hksync_update
  elif [[ $action == "addcron" ]]; then
	crontab_add
  fi
else
	echo -e "\033[31m 远端通信失败，程序中止 \033[0m"
fi
else
 	echo -e "通信：\033[32m $github_test \033[0m"
	echo -e "同步：\033[32m $github_cron \033[0m"
	echo -e "请输入\033[32m hksync vnet|nginx|all|cron\033[0m 来执行同步操作" 
	echo -e "输入\033[32m hksync update\033[0m 检测更新"
	echo -e "输入\033[32m hksync addcron\033[0m 添加自动同步与自动更新"
fi
